name: Deploy Hugo site to Pages

on:
  # 在针对默认分支的推送上运行
  # push:
  #   branches:
  #     - master  # 或者你的默认分支名，比如 master

  # 允许你从 Actions 选项卡手动运行此工作流程
  workflow_dispatch:

# 设置 GITHUB_TOKEN 的权限以允许部署到 GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# 只允许同时进行一次部署，跳过在运行中的和最新排队的运行之间的排队运行。
# 但是，不要取消进行中的运行，因为我们希望允许这些生产部署完成。
concurrency:
  group: "pages"
  cancel-in-progress: false

# 默认使用 bash
defaults:
  run:
    shell: bash

jobs:
  # 构建作业
  build:
    runs-on: ubuntu-latest # 使用最新的 Ubuntu 运行器
    env:
      HUGO_VERSION: 0.145.0 # 指定你想使用的 Hugo 版本 (建议使用较新版本)
    steps:
      - name: Checkout # 检出你的代码
        uses: actions/checkout@v4
        with:
          submodules: recursive # 拉取 Git Submodule（主题通常是 Submodule）
          fetch-depth: 0 # 获取所有历史记录，以便 Hugo 获取 lastmod 等信息

      - name: Setup Hugo # 设置 Hugo 环境
        uses: peaceiris/actions-hugo@v2 # 使用流行的 Hugo Setup Action
        with:
          hugo-version: '${{ env.HUGO_VERSION }}'
          # extended: true # 如果你的主题需要 Hugo Extended 版本（例如使用 Sass/SCSS），取消此行注释

      - name: Build # 运行 Hugo 构建命令
        run: hugo --minify # --minify 是可选的，用于压缩输出文件

      - name: Upload artifact # 将构建结果打包为 artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./public # Hugo 默认将站点构建到 public 目录

  # 部署作业
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }} # Action 会输出部署后的 URL
    runs-on: ubuntu-latest
    needs: build # 部署作业依赖于构建作业成功完成
    steps:
      - name: Deploy to GitHub Pages # 部署到 GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4 # 使用官方的部署 Action